pstree id (egrep -o)
000-999

Õâ½ĞÈ¡Ä£ÔËËã

a=1234400
echo $((a%100))




½Ğ×ö shar archive

shar file > file.shar ¾ÍÄÜÖÆ×÷³öÀ´
ÒÔºóÓÃ sh file.shar  ½â¿ª



±ê  Ìâ: Re: linuxÔõÃ´²é¿´Ó²ÅÌÀàĞÍ£¿
·¢ĞÅÕ¾: Ë®Ä¾ÉçÇø (Thu Nov 26 10:53:10 2009), Õ¾ÄÚ

²»ÖªµÀ¾ÍÖ±½ÓÎÊ£¬±ğ¡°µ±È»¿ÉÒÔ¡±¡£ÄãÕâ¸ö¡°µ±È»¿ÉÒÔ¡±¸ù±¾¾ÍÊÇ¸ö³õ¼¶´íÎó¡£

ÄãÃÇUbuntuÓÃ»§¾ÍÊÇÏ²»¶ÔÚÎÊÎÊÌâµÄÊ±ºòË³±ãÃ°³äÒ»ÏÂ×¨¼Ò£¬°æ´óÕâÁ½ÌìÒ²·¸¹ıÕâ¸ö´íÎó?

ÒªÅĞ¶ÏÊÇÊ²Ã´½Ó¿ÚºÜ¼òµ¥£¬µ½/sys/block/Éè±¸/deviceÀï¿´¿´¡£
-------------------------------------------------------------
±ê  Ìâ: ÎÊÒ»¸öshell½Å±¾
·¢ĞÅÕ¾: Ë®Ä¾ÉçÇø (Thu Nov 26 14:57:01 2009), Õ¾ÄÚ

ÓĞÕâÑùµÄÎÄ¼ş

class 1
    student A ****
    student B ****
    Student C ****


ÃüÁîgetinfo "student a" ¿ÉÒÔ»ñÈ¡aµÄĞÅÏ¢

Ïë°Ñ¸ÃÎÄ¼ş±ä³É

class 1
    student A ****
        A info
    student B ****
        B info
    Student C ****
        C info

ÏÔÈ»getinfoÊÇÒÑÖªµÄ

cat $file | while read line
do
      echo $line
      s=`echo $line|awk '{print $1,$2}'`
      if echo $s|grep -q student ;  then
            getinfo "$s"
      fi
done
------------------------------------------------------------------------------

±ê  Ìâ: ÎÊ¸öshell script
·¢ĞÅÕ¾: Ë®Ä¾ÉçÇø (Thu Nov 26 17:38:39 2009), Õ¾ÄÚ

ÔõÃ´°Ñ

token:1
value:11
token:2
value:22

×ª»»³É
1:11
2:22


awk -F: '/token/ {printf("%s:", $2);} /value/ {printf("%s\n", $2);}' urfile

awk -F: '{printf("%s%s", $2, (NR%2) ? ":" : "\n");}' urfile
---------
IFS=:
n=0
while read a b; do
  n=`expr $n + 1`
  [ 0 -eq `expr $n % 2` ] && echo $b || echo -n "$b:"
done
-----------------------------------------------------------------------------
man pcre
-----------------------------------------------------------------------------
±ê  Ìâ: ÔõÑùÓÃ sed ºÍ wc ²éÕÒ×ÖÄ¸×Ö·û(alphabetic characters)¸öÊı
·¢ĞÅÕ¾: Ë®Ä¾ÉçÇø (Sat Nov 28 16:41:27 2009), Õ¾ÄÚ

¼Ù¶¨Ò»¸öÎÄ¼şÖĞ°üº¬ÓĞalphabetic character £¨±ÈÈça, B)ºÍ·Ç×ÖÄ¸×Ö·û£¬±ÈÈç, 1,2, @
#, $.
ÔõÑù°Ñ×ÖÄ¸×Ö·ûµÄ¸öÊı²é³öÀ´ÄØ£¿
Ğ»Ğ»£¡
------------------------------------------------------------------------------
tr -cd '[:alpha:]' <file | wc -m
------------------------------------------------------------------------------
±ê  Ìâ: Çë½ÌÒ»¸ösed½Å±¾
·¢ĞÅÕ¾: Ë®Ä¾ÉçÇø (Tue Dec  1 13:19:53 2009), Õ¾ÄÚ

°ÑµÚÒ»ĞĞÒÔºó£¬ÒÔ#¿ªÍ·µÄĞĞÉ¾µô¡£
µÚÒ»ĞĞËäÈ»ÊÇ#¿ªÍ·£¬²»ÄÜÉ¾¡£


sed -n -e "1p;/^[^#]/p"
sed -n -e '1p;/^#/!p'

sed '10,20s/^#.*//'

Ç°Ãæ2µ½Ä©Î²Ò²¿É sed '2,$s/^#.*//'
------------------------------------------------------------------------------
You have an in-memory sorted array of integers, possibly containing
duplicates. Given a query (integer), find the first match in the array
and the number of matches.
The function prototype looks like:
int get_num_of_ints (
const int* array, /* input array */
size_t array_size, /* number of elements in array */
int query, /* desired match value */
size_t* first_match_idx, /* array index of first match */
size_t* count /* number of matches */
);
If a match is found, the get_num_of_ints() function should assign
values to first_match_idx and count.
As an example, if the array was [0,1,2,3,4,4,5,6,7,8,8,8,9] and the
query was "8", the output should have:
first_match_idx = 9 (array[9] is the first occurence of '8')
count = 3 (There are 3 occurences of '8')
--

Ä¿Â¼ÏÂÃ¿¸öÎÄ¼şÖĞ³öÏÖµÄ×ÖÄ¸¸öÊı¡¢Êı×Ö¸öÊı¡¢¿Õ¸ñ¸öÊı¼°ĞĞÊı

mmap

C10KÎÊÌâ

------------------------------------------------------------------------------

Á½¸öÎÄ¼ş
foo1 bar
foo2 bar2
foo3 bar3
foo4 bar3
µÚ¶ş¸öÎÄ¼şÖ»ÓĞÒ»ÁĞ
foo2
foo3

ÈçºÎµÃµ½ÏÂ±ßÕâÖÖºÏ²¢ºóµÄĞ§¹û?
foo2 bar2
foo3 bar3

info coreutils join


bash Óï·¨£º

join  -1 2 <(cat -n a | sort -k 2,2) <(sort b) |
        sort -k 2,2 | cut -d " " -f 1,3-[36m          [m
---------------------------------------------------------------------------

[36mÒª´´½¨50¸öÎÄ¼ş£¬Ã¿¸ö500k [m
[36mÓÃshellÔõÃ´ÊµÏÖ£¿Ğ»Ğ»    [m



for i in {1..500}; do
        dd if=/dev/zero of=file$i bs=500K count=1
done
-------------------------------------------------------------------------------

ÓĞÈô¸É¸öÎÄ¼ş£¬Ã¿¸öÎÄ¼şÃ¿ĞĞÊÇÒ»¸öÊı×Ö£¬ÕâĞ©ÎÄ¼şµÄĞĞÊıÏàÍ¬
ÈçºÎÈ¡Ã¿¸öÎÄ¼şµÄÍ¬Ò»ĞĞµÄÊı¾İÉú³ÉÒ»¸öcsvÎÄ¼ş
±ÈÈç¼ÙÉèÓĞÈı¸öÎÄ¼şµÄ»°
ÎÄ¼ş1
1.2
3.3
3.5
ÎÄ¼ş2
2.3
2.1
3.2
ÎÄ¼şÈı
1
2
3
×îºóµÃµ½
1.2, 2.3, 1
3.3,2.1,2
3.5,3.2, 3


paste  -d, data1 data2 data3
_____________________________________________________________________________

¼ÙÉèÓĞÒ»¸öÎÄ±¾ÎÄ¼ş£¬¾ßÓĞÈçÏÂµÄĞÎÊ½£º
1 2 1 3  1 4  1 5
2 4 2 6  2 8  2 10
3 6 3 9  3 12 3 15
4 8 4 12 4 16 4 20
¾ÍÊÇËµ£¬»ùÊıÁĞ¶¼ÊÇÒ»ÑùµÄ£¬µ«Å¼ÊıÁĞ²»Í¬£¬ÎÒÏÖÔÚÏëÌáÈ¡³öÆäÖĞµÄÅ¼ÊıÁĞ£¬¸ÃÈçºÎĞ´?
µÃµ½ÈçÏÂÎÄ¼ş£º
2  3   4   5
4  6   8   10
6  9   12  15
8  12  16  20

awk '{for(i = 2; i <= NF; i+=2)  printf("%s ", $i); printf("\n");}' urfile
----------------------------------------------------------------------------------


ÓĞÒ»¸ö²ÎÊıÎÄ¼ş£¨Èç£ºarg.lst£©£¬ÆäÖĞÃ¿Ò»ĞĞ»ù±¾ÉÏÊÇ£º
²ÎÊıÃû = ²ÎÊıÖµ    £¡×¢ÊÍ
Èç£º

...
   AA  =  20    ! xxxxxxx (ĞĞÖĞ¿Õ¸ñÈô¸É)
...

ÎÒÏëĞ´Ò»¸ö½Å±¾£¬ĞŞ¸ÄÎÄ¼şÖĞÌØ¶¨µÄ²ÎÊıµÄÖµ¡£
ÓĞÃ»ÓĞ¼ò½àµÄ·½·¨£¿
ÇóÖú¡£
